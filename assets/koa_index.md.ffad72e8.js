import{_ as s,o as n,c as a,Q as p}from"./chunks/framework.edbfdbf1.js";const d=JSON.parse('{"title":"Object.create--原型式继承","description":"","frontmatter":{},"headers":[],"relativePath":"koa/index.md","filePath":"koa/index.md"}'),o={name:"koa/index.md"},l=p(`<h1 id="object-create-原型式继承" tabindex="-1">Object.create--原型式继承 <a class="header-anchor" href="#object-create-原型式继承" aria-label="Permalink to &quot;Object.create--原型式继承&quot;">​</a></h1><p>在Koa源码中，我们在application的构造函数中看到以下的代码：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">constructor {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.context </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Object.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(context)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.request </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Object.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(request)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.response </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Object.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(response)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">constructor {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.context </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Object.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(context)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.request </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Object.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(request)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.response </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Object.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(response)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>那么Object.create的作用是什么呢？</p><h2 id="一、object-create的功能" tabindex="-1">一、Object.create的功能 <a class="header-anchor" href="#一、object-create的功能" aria-label="Permalink to &quot;一、Object.create的功能&quot;">​</a></h2><p>在MDN的相关描述是：</p><blockquote><p><strong>The Object.create() static method creates a new object, using an existing object as the prototype of the newly created object.</strong></p></blockquote><p>总结为两点：</p><ul><li>创建一个新对象</li><li>该新对象的prototype为 Object.create(proto, propertiesObject) 的第一个参数 proto</li></ul><p>在 ECMAScript 规范中这样描述 Object.create 的执行步骤：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Object.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;"> ( </span><span style="color:#79B8FF;">O</span><span style="color:#E1E4E8;">, Properties )</span></span>
<span class="line"><span style="color:#79B8FF;">1.</span><span style="color:#E1E4E8;"> If </span><span style="color:#79B8FF;">O</span><span style="color:#E1E4E8;"> is not an Object and </span><span style="color:#79B8FF;">O</span><span style="color:#E1E4E8;"> is not </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> a TypeError exception.</span></span>
<span class="line"><span style="color:#79B8FF;">2.</span><span style="color:#E1E4E8;"> Let obj be </span><span style="color:#B392F0;">OrdinaryObjectCreate</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">O</span><span style="color:#E1E4E8;">). </span><span style="color:#6A737D;">// 1、obj = MakeBasicObject() 2、obj.prototypr = O</span></span>
<span class="line"><span style="color:#79B8FF;">3.</span><span style="color:#E1E4E8;"> If Properties is not </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">, then Return </span><span style="color:#B392F0;">ObjectDefineProperties</span><span style="color:#E1E4E8;">(obj, Properties).</span></span>
<span class="line"><span style="color:#79B8FF;">4.</span><span style="color:#E1E4E8;"> Return obj.</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Object.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;"> ( </span><span style="color:#005CC5;">O</span><span style="color:#24292E;">, Properties )</span></span>
<span class="line"><span style="color:#005CC5;">1.</span><span style="color:#24292E;"> If </span><span style="color:#005CC5;">O</span><span style="color:#24292E;"> is not an Object and </span><span style="color:#005CC5;">O</span><span style="color:#24292E;"> is not </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> a TypeError exception.</span></span>
<span class="line"><span style="color:#005CC5;">2.</span><span style="color:#24292E;"> Let obj be </span><span style="color:#6F42C1;">OrdinaryObjectCreate</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">O</span><span style="color:#24292E;">). </span><span style="color:#6A737D;">// 1、obj = MakeBasicObject() 2、obj.prototypr = O</span></span>
<span class="line"><span style="color:#005CC5;">3.</span><span style="color:#24292E;"> If Properties is not </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">, then Return </span><span style="color:#6F42C1;">ObjectDefineProperties</span><span style="color:#24292E;">(obj, Properties).</span></span>
<span class="line"><span style="color:#005CC5;">4.</span><span style="color:#24292E;"> Return obj.</span></span></code></pre></div><p>在Koa中的应用，可以靠伪代码一探究竟</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Context</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">inspect</span><span style="color:#E1E4E8;">() {},</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">toJSON</span><span style="color:#E1E4E8;">() {},</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">throw</span><span style="color:#E1E4E8;"> () {},</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">onerror</span><span style="color:#E1E4E8;"> () {},</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">get</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">cookies</span><span style="color:#E1E4E8;">() {},</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">set</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">cookies</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">_cookies</span><span style="color:#E1E4E8;">) {}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Application</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">constructor</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.context </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Object.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(Context)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// this.context = context 会怎么样？</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 这样this.context进行重写属性和方法时，会影响到 Context 对象</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// this.context.__proto__.prop = ... 也会影响到 Context 对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">app</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Application</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(app) </span><span style="color:#6A737D;">// Application { context: {} }</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(app.context) </span><span style="color:#6A737D;">// {cookies: undefined, ...}</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(app.context.toJSON) </span><span style="color:#6A737D;">// [Function: toJSON]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Context</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">inspect</span><span style="color:#24292E;">() {},</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">toJSON</span><span style="color:#24292E;">() {},</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">throw</span><span style="color:#24292E;"> () {},</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">onerror</span><span style="color:#24292E;"> () {},</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">get</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">cookies</span><span style="color:#24292E;">() {},</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">set</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">cookies</span><span style="color:#24292E;">(</span><span style="color:#E36209;">_cookies</span><span style="color:#24292E;">) {}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Application</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">constructor</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.context </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Object.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(Context)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// this.context = context 会怎么样？</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 这样this.context进行重写属性和方法时，会影响到 Context 对象</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// this.context.__proto__.prop = ... 也会影响到 Context 对象</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">app</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Application</span><span style="color:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(app) </span><span style="color:#6A737D;">// Application { context: {} }</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(app.context) </span><span style="color:#6A737D;">// {cookies: undefined, ...}</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(app.context.toJSON) </span><span style="color:#6A737D;">// [Function: toJSON]</span></span></code></pre></div><p><strong>这样Koa实列可以通过自身属性context访问Context类下的属性和方法</strong></p><h2 id="二、object-create-null-对比-new-object-和" tabindex="-1">二、Object.create(null) 对比 new Object() 和 {} <a class="header-anchor" href="#二、object-create-null-对比-new-object-和" aria-label="Permalink to &quot;二、Object.create(null) 对比 new Object() 和 {}&quot;">​</a></h2><p>后两者均继承自 Object 构造函数，而使用Object.create(null) ，能得到一个没有任何继承痕迹的对象。</p>`,16),e=[l];function t(c,r,E,y,i,F){return n(),a("div",null,e)}const C=s(o,[["render",t]]);export{d as __pageData,C as default};
